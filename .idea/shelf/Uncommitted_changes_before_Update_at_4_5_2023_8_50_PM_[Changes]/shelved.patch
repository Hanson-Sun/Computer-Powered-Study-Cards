Index: .idea/shelf/Uncommitted_changes_before_Update_at_3_25_2023_9_40_PM__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_3_25_2023_9_40_PM__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_3_25_2023_9_40_PM__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_3_25_2023_9_40_PM__Changes_.xml	(revision a71700fe0a835cccee6514ccb25a7f17819748a6)
+++ /dev/null	(revision a71700fe0a835cccee6514ccb25a7f17819748a6)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_3_25_2023_9_40_PM_[Changes]" date="1679805755165" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_3_25_2023_9_40_PM_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 3/25/2023 9:40 PM [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_3_25_2023_9_40_PM_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_3_25_2023_9_40_PM_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_3_25_2023_9_40_PM_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_3_25_2023_9_40_PM_[Changes]/shelved.patch	(revision a71700fe0a835cccee6514ccb25a7f17819748a6)
+++ /dev/null	(revision a71700fe0a835cccee6514ccb25a7f17819748a6)
@@ -1,539 +0,0 @@
-Index: data/csm.cpsc
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>{\"cardSets\": [\r\n    {\r\n        \"cards\": [],\r\n        \"title\": \"skull\",\r\n        \"usecount\": 29\r\n    },\r\n    {\r\n        \"cards\": [],\r\n        \"title\": \"Card set 2\",\r\n        \"usecount\": 26\r\n    },\r\n    {\r\n        \"cards\": [],\r\n        \"title\": \"Card set 1\",\r\n        \"usecount\": 19\r\n    },\r\n    {\r\n        \"cards\": [],\r\n        \"title\": \"Card set 9\",\r\n        \"usecount\": 5\r\n    },\r\n    {\r\n        \"cards\": [],\r\n        \"title\": \"Card set 3\",\r\n        \"usecount\": 4\r\n    },\r\n    {\r\n        \"cards\": [],\r\n        \"title\": \"Card set 8\",\r\n        \"usecount\": 4\r\n    },\r\n    {\r\n        \"cards\": [],\r\n        \"title\": \"Card set 10\",\r\n        \"usecount\": 4\r\n    },\r\n    {\r\n        \"cards\": [],\r\n        \"title\": \"Card set 5\",\r\n        \"usecount\": 4\r\n    },\r\n    {\r\n        \"cards\": [],\r\n        \"title\": \"Card set 7\",\r\n        \"usecount\": 3\r\n    },\r\n    {\r\n        \"cards\": [],\r\n        \"title\": \"Card set 4\",\r\n        \"usecount\": 3\r\n    },\r\n    {\r\n        \"cards\": [],\r\n        \"title\": \"Card set 6\",\r\n        \"usecount\": 2\r\n    }\r\n]}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/data/csm.cpsc b/data/csm.cpsc
---- a/data/csm.cpsc	(revision d3c103cd9c157ac70cae1ddda3516fe6fd579c5c)
-+++ b/data/csm.cpsc	(date 1679645256280)
-@@ -2,22 +2,27 @@
-     {
-         "cards": [],
-         "title": "skull",
--        "usecount": 29
-+        "usecount": 30
-     },
-     {
-         "cards": [],
-         "title": "Card set 2",
--        "usecount": 26
-+        "usecount": 27
-     },
-     {
-         "cards": [],
-         "title": "Card set 1",
--        "usecount": 19
-+        "usecount": 20
-     },
-     {
-         "cards": [],
-         "title": "Card set 9",
-         "usecount": 5
-+    },
-+    {
-+        "cards": [],
-+        "title": "Card set 10",
-+        "usecount": 5
-     },
-     {
-         "cards": [],
-@@ -28,11 +33,6 @@
-         "cards": [],
-         "title": "Card set 8",
-         "usecount": 4
--    },
--    {
--        "cards": [],
--        "title": "Card set 10",
--        "usecount": 4
-     },
-     {
-         "cards": [],
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-03-17_10_55_a_m___Changes_.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-03-17_10_55_a_m___Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-03-17_10_55_a_m___Changes_.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-03-17_10_55_a_m___Changes_.xml	(revision d3c103cd9c157ac70cae1ddda3516fe6fd579c5c)
-+++ /dev/null	(revision d3c103cd9c157ac70cae1ddda3516fe6fd579c5c)
-@@ -1,4 +0,0 @@
--<changelist name="Uncommitted_changes_before_Update_at_2023-03-17_10_55_a_m__[Changes]" date="1679075760815" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023-03-17_10_55_a_m__[Changes]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2023-03-17 10:55 a.m. [Changes]" />
--</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-03-17_10_55_a_m__[Changes]/shelved.patch
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-03-17_10_55_a_m__[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-03-17_10_55_a_m__[Changes]/shelved.patch
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-03-17_10_55_a_m__[Changes]/shelved.patch	(revision d3c103cd9c157ac70cae1ddda3516fe6fd579c5c)
-+++ /dev/null	(revision d3c103cd9c157ac70cae1ddda3516fe6fd579c5c)
-@@ -1,395 +0,0 @@
--Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-03-08_11_08_a_m___Changes_.xml
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-03-08_11_08_a_m___Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-03-08_11_08_a_m___Changes_.xml
--deleted file mode 100644
----- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-03-08_11_08_a_m___Changes_.xml	(revision c49d1d401930d9b0803bb02ecd3506c0ffbc5b0e)
--+++ /dev/null	(revision c49d1d401930d9b0803bb02ecd3506c0ffbc5b0e)
--@@ -1,4 +0,0 @@
---<changelist name="Uncommitted_changes_before_Update_at_2023-03-08_11_08_a_m__[Changes]" date="1678302515414" recycled="true" deleted="true">
---  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023-03-08_11_08_a_m__[Changes]/shelved.patch" />
---  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2023-03-08 11:08 a.m. [Changes]" />
---</changelist>
--\ No newline at end of file
--Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-03-08_11_08_a_m__[Changes]/shelved.patch
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-03-08_11_08_a_m__[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-03-08_11_08_a_m__[Changes]/shelved.patch
--deleted file mode 100644
----- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-03-08_11_08_a_m__[Changes]/shelved.patch	(revision c49d1d401930d9b0803bb02ecd3506c0ffbc5b0e)
--+++ /dev/null	(revision c49d1d401930d9b0803bb02ecd3506c0ffbc5b0e)
--@@ -1,376 +0,0 @@
---Index: src/main/ui/ConsoleInterface.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+>package ui;\r\n\r\nimport model.Card;\r\nimport model.CardSet;\r\nimport model.CardSetsMenu;\r\nimport model.CardSide;\r\nimport persistence.JsonUtils;\r\n\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.InputMismatchException;\r\nimport java.util.Scanner;\r\n\r\n// TODO: refactor to have a global cardset --> unify cardset saving functionality\r\n// TODO: fix the optional saving of files\r\n//       --> selecting a card is the same as loading a card\r\n// TODO: fix method lengths\r\n// The main console user interface of the flashcard application.\r\npublic class ConsoleInterface {\r\n    private final Scanner sc = new Scanner(System.in);\r\n    private final CardSetsMenu cardSetsMenu;\r\n    private CardSet selectedCardSet;\r\n    private static final String CSM_DATA = \"./data/csm.cpsc\";\r\n    private static final String CARDSET_FOLDER = \"./data/CardSets/\";\r\n    private static final String SUFFIX = \".cpsc\";\r\n    private static JsonUtils util;\r\n\r\n    private CardSetsMenu readCardSetMenu() {\r\n        try {\r\n            return util.readCardSetMenu();\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    private CardSet readCardSet(String title) {\r\n        try {\r\n            return util.readCardSet(title);\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    // EFFECTS: instantiate a new console interface with a loaded CarSetMenu\r\n    public ConsoleInterface() {\r\n        util = new JsonUtils(CSM_DATA, CARDSET_FOLDER, SUFFIX);\r\n        this.cardSetsMenu = readCardSetMenu();\r\n        //generateTestSets(this.cardSetsMenu);\r\n        start();\r\n    }\r\n\r\n    //EFFECTS: A function to generate cardsets to help user testing.\r\n    private void generateTestSets(CardSetsMenu csm) {\r\n        try {\r\n            for (int i = 1; i <= 10; i++) {\r\n                csm.addCardSet(generateTestCards(i));\r\n                util.saveCardSet(generateTestCards(i));\r\n            }\r\n            util.saveCardSetMenu(csm);\r\n        } catch (IOException e) {\r\n            throw new RuntimeException();\r\n        }\r\n    }\r\n\r\n    //EFFECTS:  A function used to generate cards in a cardset for user testing\r\n    private CardSet generateTestCards(int i) {\r\n        CardSet testCardSet = new CardSet(\"Card set \" + i);\r\n        for (int j = 1; j < 9; j++) {\r\n            CardSide front = new CardSide();\r\n            CardSide back = new CardSide();\r\n            front.setContent(\"Set \" + i + \" Front \" + j);\r\n            back.setContent(\"Set \" + i + \" Back \" + j);\r\n            Card testCard = new Card(front, back);\r\n            testCardSet.addCard(testCard);\r\n        }\r\n        return testCardSet;\r\n    }\r\n\r\n    private void saveState() {\r\n        try {\r\n            if (this.selectedCardSet != null) {\r\n                util.saveCardSet(this.selectedCardSet);\r\n            }\r\n            util.saveCardSetMenu(this.cardSetsMenu);\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    private void deleteCardSet(CardSet cs) {\r\n        this.selectedCardSet = null;\r\n        util.deleteCardSet(cs);\r\n        saveState();\r\n    }\r\n\r\n    // EFFECTS: return the integer user input and \"absorbs\" newline character\r\n    private int getIntInput() {\r\n        while (true) {\r\n            try {\r\n                return Integer.parseInt(sc.nextLine());\r\n            } catch (NumberFormatException e) {\r\n                System.out.println(\"That was not an integer! Please try again\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: loads all card data into menu\r\n    private void loadCardSet(CardSetsMenu csm) {\r\n        for (CardSet cs : csm.getCardSets()) {\r\n            CardSet n = readCardSet(cs.getTitle());\r\n            csm.setCardSet(csm.getCardSets().indexOf(cs), n);\r\n        }\r\n    }\r\n\r\n    // EFFECTS: begin the starting menu of the program\r\n    @SuppressWarnings({\"checkstyle:MethodLength\", \"checkstyle:SuppressWarnings\"})\r\n    private void start() {\r\n        while (true) {\r\n            int choice;\r\n            System.out.println(\"Hello, welcome to CPSC \\nWhat would you like to do?\");\r\n            System.out.println(\"[1] View card sets\");\r\n            System.out.println(\"[2] Make new card set\");\r\n            System.out.println(\"[3] Save Changes\");\r\n            System.out.println(\"[4] Load All Existing CardSets\");\r\n            System.out.println(\"[0] exit\");\r\n            try {\r\n                choice = getIntInput();\r\n            } catch (InputMismatchException e) {\r\n                System.out.println(\"You did not enter an integer!\");\r\n                choice = getIntInput();\r\n            }\r\n            if (choice == 1) {\r\n                seeCardSets();\r\n            } else if (choice == 2) {\r\n                makeNewCardSet();\r\n            } else if (choice == 3) {\r\n                saveState();\r\n            } else if (choice == 4) {\r\n                loadCardSet(this.cardSetsMenu);\r\n            } else if (choice == 0) {\r\n                System.out.println(\"Thanks for using CPSC, bye bye!!\");\r\n                saveState();\r\n                break;\r\n            } else {\r\n                System.out.println(choice + \" is not a valid option, please try again\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // EFFECTS: lead user to create menu if there are no cardsets\r\n    private void seeCardSetEmpty() {\r\n        while (true) {\r\n            System.out.println(\"You have no card sets, would you like to make a new one?\");\r\n            System.out.println(\"[1] Make a new card set\");\r\n            System.out.println(\"[0] go back\");\r\n            int choice = getIntInput();\r\n            if (choice == 1) {\r\n                makeNewCardSet();\r\n            } else if (choice == 0) {\r\n                saveState();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // EFFECTS: display menu to pick action for a chosen card set\r\n    // MODIFIES: currentCardSet, this\r\n    @SuppressWarnings({\"checkstyle:MethodLength\", \"checkstyle:SuppressWarnings\"})\r\n    private void cardSetSelected(CardSet currentCardSet) {\r\n        while (true) {\r\n            System.out.println(\"What do you want to do with card set, \" + \"'\" + currentCardSet.getTitle() + \"'\");\r\n            System.out.println(\"[1] Review card set\\n[2] Edit card set\\n[3] Delete card set\"\r\n                    + \"\\n[4] View card set contents and stats\\n[5] Save Cardset\");\r\n            System.out.println(\"[0] go back\");\r\n            currentCardSet.incrementUseCount();\r\n            int csChoice = getIntInput();\r\n            if (csChoice == 1) {\r\n                reviewCardSet(currentCardSet);\r\n            } else if (csChoice == 2) {\r\n                editCardSet(currentCardSet);\r\n            } else if (csChoice == 3) {\r\n                cardSetsMenu.deleteCardSet(currentCardSet);\r\n                deleteCardSet(currentCardSet);\r\n                break;\r\n            } else if (csChoice == 4) {\r\n                seeCardStats(currentCardSet);\r\n            } else if (csChoice == 5) {\r\n                saveState();\r\n            } else if (csChoice == 0) {\r\n                saveState();\r\n                break;\r\n            } else {\r\n                System.out.println(csChoice + \" is not a valid choice, please pick again\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // EFFECTS: display the stats of the cardset, including the accuracy of each card and how much the cardset is used\r\n    private void seeCardStats(CardSet currentCardSet) {\r\n        System.out.println(\"The cardset '\" + currentCardSet.getTitle() + \"' has been selected \"\r\n                + currentCardSet.getUseCount() + \" times. It is currently \"\r\n                + (currentCardSet.getAverageAccuracy() * 100) + \"% accurate\");\r\n        int i = 0;\r\n        for (Card c : currentCardSet.getCards()) {\r\n            i++;\r\n            System.out.println(\"Card \" + i + \": \");\r\n            System.out.println(c.getFront().getContent() + \" : \" + c.getBack().getContent());\r\n            int sum = (c.getCorrectCount() + c.getWrongCount());\r\n            if (sum != 0) {\r\n                System.out.println(\"Reviewed: \" + (c.getCorrectCount() + c.getWrongCount()) + \" times; \"\r\n                        + \"Accuracy: \" + (c.getAccuracy() * 100) + \"%\");\r\n            } else {\r\n                System.out.println(\"This Card has not been reviewed yet\");\r\n            }\r\n        }\r\n        System.out.println();\r\n    }\r\n\r\n    // EFFECTS: sorts and displays the cardsets inside a cardsetmenu and allow users to select a given cardset\r\n    // MODIFIES: this\r\n    @SuppressWarnings({\"checkstyle:MethodLength\", \"checkstyle:SuppressWarnings\"})\r\n    private void seeCardSets() {\r\n        if (this.cardSetsMenu.getCardSets().size() == 0) {\r\n            seeCardSetEmpty();\r\n        } else {\r\n            while (true) {\r\n                this.cardSetsMenu.sortCardSet();\r\n                int count = 0;\r\n                for (CardSet cs : this.cardSetsMenu.getCardSets()) {\r\n                    count += 1;\r\n                    System.out.println(count + \". \" + cs.getTitle());\r\n                }\r\n                System.out.println(\"[0] go back\");\r\n                System.out.println(\"Which card set would you like to select? (enter card number)\");\r\n                int choice = getIntInput();\r\n                if (choice <= count && choice >= 1) {\r\n                    int i = choice - 1;\r\n                    this.cardSetsMenu.setCardSet(i, readCardSet(this.cardSetsMenu.getCardSet(i).getTitle()));\r\n                    this.selectedCardSet = this.cardSetsMenu.getCardSet(i);\r\n                    cardSetSelected(this.selectedCardSet);\r\n                } else if (choice == 0) {\r\n                    saveState();\r\n                    break;\r\n                } else {\r\n                    System.out.println(choice + \" is not a valid choice, please pick again\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // EFFECTS: create new cardset and add it to the menu, also allow users to add new cards in the cardset\r\n    // MODIFIES: this\r\n    @SuppressWarnings({\"checkstyle:MethodLength\", \"checkstyle:SuppressWarnings\"})\r\n    private void makeNewCardSet() {\r\n        CardSet newCardSet;\r\n        while (true) {\r\n            System.out.println(\"Card set maker:\\nWhat is the title of this card set?\");\r\n            String title = sc.nextLine();\r\n            if (cardSetsMenu.containsCardSetWithName(title)) {\r\n                System.out.println(\"A card set already has the title: \" + \"\\\"\" + title + \"\\\"\\nPlease try again\");\r\n            }\r\n            if (!CardSet.isValidName(title)) {\r\n                System.out.println(title + \": is not a valid name, please try again\");\r\n            } else {\r\n                newCardSet = new CardSet(title);\r\n                this.selectedCardSet = newCardSet;\r\n                cardSetsMenu.addCardSet(newCardSet);\r\n                saveState();\r\n                break;\r\n            }\r\n        }\r\n        while (true) {\r\n            System.out.println(\"[1] add new card\\n[0] go back\");\r\n            int cardChoice = getIntInput();\r\n            if (cardChoice == 1) {\r\n                makeNewCard(newCardSet);\r\n            } else if (cardChoice == 0) {\r\n                saveState();\r\n                break;\r\n            } else {\r\n                System.out.println(cardChoice + \" is not a valid option, please try again\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // EFFECTS: create and adds new card to a cardset\r\n    // MODIFIES: newCardSet\r\n    private void makeNewCard(CardSet newCardSet) {\r\n        System.out.println(\"Enter the value for the front of the card\");\r\n        String frontText = sc.nextLine();\r\n        System.out.println(\"Enter the value for the back of the card\");\r\n        String backText = sc.nextLine();\r\n        CardSide front = new CardSide();\r\n        CardSide back = new CardSide();\r\n        front.setContent(frontText);\r\n        back.setContent(backText);\r\n        Card newCard = new Card(front, back);\r\n        newCardSet.addCard(newCard);\r\n        System.out.println(\"New card added\");\r\n    }\r\n\r\n    // EFFECTS: display the review options for a cardset\r\n    // MODIFIES: currentCardSet\r\n    private boolean checkReviewType(CardSet currentCardSet) {\r\n        while (true) {\r\n            System.out.println(\"Do you want to show the front or the back first?\");\r\n            System.out.println(\"[1] front\");\r\n            System.out.println(\"[2] back\");\r\n            System.out.println(\"[0] exit review\");\r\n            int choice = getIntInput();\r\n            if (choice == 1) {\r\n                currentCardSet.setCardFlippedState(false);\r\n                break;\r\n            } else if (choice == 2) {\r\n                currentCardSet.setCardFlippedState(true);\r\n                break;\r\n            } else if (choice == 0) {\r\n                saveState();\r\n                return false;\r\n            } else {\r\n                System.out.println(choice + \" is not a valid option, please try again\");\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // TODO: fix save functionality\r\n    // EFFECTS: start the review process for a cardset\r\n    private void reviewCardSet(CardSet currentCardSet) {\r\n        boolean cont = checkReviewType(currentCardSet);\r\n        if (cont) {\r\n            System.out.println(\"Press enter to begin\");\r\n            sc.nextLine();\r\n            ArrayList<Card> mixedCards = currentCardSet.getMixedCards();\r\n            boolean exit;\r\n            for (Card c : mixedCards) {\r\n                System.out.println(\"\\n\" + c.getCardFace().getContent() + \"\\nType your answer or just press enter\");\r\n                sc.nextLine();\r\n                c.flip();\r\n                System.out.println(c.getCardFace().getContent());\r\n                exit = verifyCardCorrectnessHelper(c);\r\n                if (exit) {\r\n                    break;\r\n                }\r\n            }\r\n            saveState();\r\n            System.out.println(\"Review completed\");\r\n        }\r\n    }\r\n\r\n    // EFFECTS: displays options for a card after review process\r\n    //          allows user to check whether they got it correct, wrong, or want to exit\r\n    // MODIFIES: c\r\n    private boolean verifyCardCorrectnessHelper(Card c) {\r\n        while (true) {\r\n            System.out.println(\"Were you correct? \\n[1] correct; [2] wrong; [0] exit review\");\r\n            int choice = getIntInput();\r\n            if (choice == 1) {\r\n                c.incrementCorrectCount();\r\n                break;\r\n            } else if (choice == 2) {\r\n                c.incrementWrongCount();\r\n                break;\r\n            } else if (choice == 0) {\r\n                return true;\r\n            } else {\r\n                System.out.println(choice + \" is not valid, please try again\");\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // EFFECTS: display options to edit a cardset:\r\n    //           add new card, delete card, edit card, or go back\r\n    private void editCardSet(CardSet currentCardSet) {\r\n        while (true) {\r\n            System.out.println(\"How do you want to edit the card set, \" + \"'\" + currentCardSet.getTitle() + \"'\");\r\n            System.out.println(\"[1] Add new card\");\r\n            System.out.println(\"[2] Edit Card\");\r\n            System.out.println(\"[3] Delete Card\");\r\n            System.out.println(\"[0] go back\");\r\n            int choice = getIntInput();\r\n            if (choice == 1) {\r\n                makeNewCard(currentCardSet);\r\n            } else if (choice == 2) {\r\n                editCardSetViewCards(currentCardSet);\r\n            } else if (choice == 3) {\r\n                deleteCardSetViewCards(currentCardSet);\r\n            } else if (choice == 0) {\r\n                saveState();\r\n                break;\r\n            } else {\r\n                System.out.println(choice + \" is not a valid input, please try again\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // EFFECTS: display options to view and delete the card in a cardset\r\n    // MODIFIES: currentCardSet\r\n    private void deleteCardSetViewCards(CardSet currentCardSet) {\r\n        while (true) {\r\n            ArrayList<Card> cards = currentCardSet.getCards();\r\n            int i = 1;\r\n            for (Card c : cards) {\r\n                System.out.println(\"Card \" + i + \":\");\r\n                System.out.println(c.getFront().getContent() + \" : \" + c.getBack().getContent());\r\n                i++;\r\n            }\r\n            System.out.println(\"Which card do you want to delete? (enter card number to select, enter 0 to exit)\");\r\n            int choice = getIntInput();\r\n            if (choice >= 1 && choice <= i) {\r\n                currentCardSet.deleteCard(choice - 1);\r\n            } else if (choice == 0) {\r\n                saveState();\r\n                break;\r\n            } else {\r\n                System.out.println(choice + \" is not a valid option, please pick again\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // EFFECTS: display options to see cards, and pick a card to edit in a cardset\r\n    private void editCardSetViewCards(CardSet currentCardSet) {\r\n        while (true) {\r\n            ArrayList<Card> cards = currentCardSet.getCards();\r\n            int i = 1;\r\n            for (Card c : cards) {\r\n                System.out.println(\"Card \" + i + \":\");\r\n                System.out.println(c.getFront().getContent() + \" : \" + c.getBack().getContent());\r\n                i++;\r\n            }\r\n            System.out.println(\"Which card do you want to edit? (enter card number to select; enter 0 to exit)\");\r\n            int choice = getIntInput();\r\n            if (choice >= 1 && choice <= i) {\r\n                editCard(currentCardSet, choice - 1);\r\n            } else if (choice == 0) {\r\n                saveState();\r\n                break;\r\n            } else {\r\n                System.out.println(choice + \" is not a valid option, please pick again\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // EFFECTS: display the options to change a card at index i in a cardset\r\n    private void editCard(CardSet c, int i) {\r\n        Card card = c.getCardByIndex(i);\r\n        CardSide cardFront = card.getFront();\r\n        CardSide cardBack = card.getBack();\r\n        System.out.println(\"The front of the card is: \");\r\n        System.out.println(cardFront.getContent());\r\n        System.out.println(\"Do you want to change this side?\");\r\n        changeCardSide(cardFront);\r\n        System.out.println(\"The back of the card is: \");\r\n        System.out.println(cardBack.getContent());\r\n        System.out.println(\"Do you want to change this side?\");\r\n        changeCardSide(cardBack);\r\n    }\r\n\r\n    // EFFECTS: change the content of a cardside\r\n    // MODIFIES: cs\r\n    private void changeCardSide(CardSide cs) {\r\n        while (true) {\r\n            System.out.println(\"[1] yes\");\r\n            System.out.println(\"[2] no\");\r\n            int choice = getIntInput();\r\n            if (choice == 1) {\r\n                System.out.println(\"Enter the new content for this card face:\");\r\n                String content = sc.nextLine();\r\n                cs.setContent(content);\r\n                break;\r\n            } else if (choice == 2) {\r\n                break;\r\n            } else {\r\n                System.out.println(choice + \" is not a valid option, please try again\");\r\n            }\r\n        }\r\n    }\r\n}\r\n
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
---diff --git a/src/main/ui/ConsoleInterface.java b/src/main/ui/ConsoleInterface.java
------ a/src/main/ui/ConsoleInterface.java	(revision 799a019e4190fb3d9bf8a2c8c2d12f9dc88abadf)
---+++ b/src/main/ui/ConsoleInterface.java	(date 1678302480674)
---@@ -76,6 +76,7 @@
---         return testCardSet;
---     }
--- 
---+
---     private void saveState() {
---         try {
---             if (this.selectedCardSet != null) {
---Index: README.md
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+># CPSC (Computer Powered Study Cards)\r\nAs an average CS student, I'm sure you've had this moment:\r\n### \"Oh no, i have 100 words to remember for my latin quiz, what do i do?\"\r\nWell, let me introduce you to the one and only **CPSC**, a versatile study tool that **improves neural memory capacity** through **active memory recall** with an innovative **human-machine interface**, all powered by state-of-the-art **Object-Oriented Java Programming**. \r\n###### (It's a flashcard application)\r\n## Description\r\nRealistically speaking, CSPC is a **Java-based flashcard application**. A flashcard is a study tool that is used to aid memorization. In general, the front side of a flashcard consists of some question or term, and the reverse side is the answer. By creating a set of flashcards, the user can test and improve memory of terms and concepts. As such, this application will have the following functions:\r\n1. Create flashcards (front and back) with image support \r\n   - Contains a text editor to edit text on flash cards.\r\n2. Store and organize sets of created flashcards that **can be edited**\r\n3. Use various study modes with the flashcards\r\n   - A typical flashcard mode, where one side is revealed first.\r\n   - A matching mode, where users need to match each front of a flashcard to its corresponding side\r\n   - A language dictation mode for learning new language vocab (*this feature is not confirmed*)\r\n4. Target difficult cards that are commonly incorrect in card sets and implement an algorithm to target those during various study modes.\r\n\r\n## Target Audience\r\nAnyone that want to use a free and open-source application to create flashcards. Any one learning a new language will benefit from this application to study and learn new vocabulary. Likewise, biology students can utilize this application to memorize the 50 million vocabs they need to remember every unit. In general, CPSC is for anyone who needs a flashcard based memory aid!\r\n\r\n## Rationale\r\nAs I started taking a biology course, I realized how I needed a tool to help me memorize the various vocabulary that I encounter during my readings. Unhappy with the various online options, I decided wanted to make my own version of a flashcard app. I thought this would be a great opportunity to build an application custom to my needs. Moreover, the nature of the application can help me develop skills of building better user interfaces. \r\n\r\n## User Stories\r\n\r\n### User Story (P0)\r\n\r\n- As a user, I want to create cards and store them in a list of flashcards (cardset)\r\n- As a user, I want to store and organize sets of flashcards\r\n- As a user, I want to be able to edit individual cards and sets\r\n- As a user, I want to have various study modes that help me use the cards\r\n- As a user, I want an interface to see the sets of cards, and the cards in each set\r\n\r\n### User Story (P1)\r\n- As a user, I want to create cards and store them in a list of flashcards (cardset)\r\n- As a user, I want to be able to edit individual cards and sets\r\n- As a user, I want to be able to delete individual cards and sets\r\n- As a user, I want to use each flashcard set to study (the order will be randomized)\r\n- As a user, I want an UI interface to see the sets of cards, and the cards in each set\r\n  - Cardsets should be stored in a menu that contains a list of other cardsets\r\n  - Cardsets should be visible in a select menu, with the most used cardset at the top (based on use count)\r\n### User Story (P2)\r\n- As a user, I want to have the option to save the entire state of the program (the main menu and each cardset)\r\n- As a user, I want to have the option to load ALL the data into the CardSetMenu (all cardsets are loaded) or each cardset is loaded automatically by itself\r\n
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
---diff --git a/README.md b/README.md
------ a/README.md	(revision 799a019e4190fb3d9bf8a2c8c2d12f9dc88abadf)
---+++ b/README.md	(date 1678302067513)
---@@ -31,13 +31,13 @@
--- - As a user, I want an interface to see the sets of cards, and the cards in each set
--- 
--- ### User Story (P1)
----- As a user, I want to create cards and store them in a list of flashcards (cardset)
---+- As a user, I want to create cards and store them in a list of flashcards (cardSet)
--- - As a user, I want to be able to edit individual cards and sets
--- - As a user, I want to be able to delete individual cards and sets
--- - As a user, I want to use each flashcard set to study (the order will be randomized)
--- - As a user, I want an UI interface to see the sets of cards, and the cards in each set
----  - Cardsets should be stored in a menu that contains a list of other cardsets
----  - Cardsets should be visible in a select menu, with the most used cardset at the top (based on use count)
---+  - Cardsets should be stored in a menu that contains a list of other cardSets
---+  - Cardsets should be visible in a select menu, with the most used cardSet at the top (based on use count)
--- ### User Story (P2)
----- As a user, I want to have the option to save the entire state of the program (the main menu and each cardset)
----- As a user, I want to have the option to load ALL the data into the CardSetMenu (all cardsets are loaded) or each cardset is loaded automatically by itself
---+- As a user, I want to have the option to save the entire state of the program (option to save the main menu and each cardSet after any changes are made)
---+- As a user, I want to have the option to load ALL the data into the CardSetMenu (all cardSets are loaded) or each cardSet is loaded upon selection
---Index: .idea/shelf/Uncommitted_changes_before_Update_at_2_27_2023_11_01_PM__Changes_.xml
---===================================================================
---diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2_27_2023_11_01_PM__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_2_27_2023_11_01_PM__Changes_.xml
---deleted file mode 100644
------ a/.idea/shelf/Uncommitted_changes_before_Update_at_2_27_2023_11_01_PM__Changes_.xml	(revision 799a019e4190fb3d9bf8a2c8c2d12f9dc88abadf)
---+++ /dev/null	(revision 799a019e4190fb3d9bf8a2c8c2d12f9dc88abadf)
---@@ -1,4 +0,0 @@
----<changelist name="Uncommitted_changes_before_Update_at_2_27_2023_11_01_PM_[Changes]" date="1677567732707" recycled="true" deleted="true">
----  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2_27_2023_11_01_PM_[Changes]/shelved.patch" />
----  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2/27/2023 11:01 PM [Changes]" />
----</changelist>
---\ No newline at end of file
---Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-02-27_10_33_a_m___Changes_.xml
---===================================================================
---diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-02-27_10_33_a_m___Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-02-27_10_33_a_m___Changes_.xml
---deleted file mode 100644
------ a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-02-27_10_33_a_m___Changes_.xml	(revision 799a019e4190fb3d9bf8a2c8c2d12f9dc88abadf)
---+++ /dev/null	(revision 799a019e4190fb3d9bf8a2c8c2d12f9dc88abadf)
---@@ -1,4 +0,0 @@
----<changelist name="Uncommitted_changes_before_Update_at_2023-02-27_10_33_a_m__[Changes]" date="1677522815476" recycled="true" deleted="true">
----  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023-02-27_10_33_a_m__[Changes]/shelved.patch" />
----  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2023-02-27 10:33 a.m. [Changes]" />
----</changelist>
---\ No newline at end of file
---Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-02-27_10_33_a_m__[Changes]/shelved.patch
---===================================================================
---diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-02-27_10_33_a_m__[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-02-27_10_33_a_m__[Changes]/shelved.patch
---deleted file mode 100644
------ a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-02-27_10_33_a_m__[Changes]/shelved.patch	(revision 799a019e4190fb3d9bf8a2c8c2d12f9dc88abadf)
---+++ /dev/null	(revision 799a019e4190fb3d9bf8a2c8c2d12f9dc88abadf)
---@@ -1,273 +0,0 @@
----Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-02-09_12_18_p_m___Changes_.xml
----===================================================================
----diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-02-09_12_18_p_m___Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-02-09_12_18_p_m___Changes_.xml
----deleted file mode 100644
------- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-02-09_12_18_p_m___Changes_.xml	(revision 70ec60027de6bb59a0951349bcd6bf7c7662fa76)
----+++ /dev/null	(revision 70ec60027de6bb59a0951349bcd6bf7c7662fa76)
----@@ -1,4 +0,0 @@
-----<changelist name="Uncommitted_changes_before_Update_at_2023-02-09_12_18_p_m__[Changes]" date="1675974016044" recycled="true" deleted="true">
-----  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023-02-09_12_18_p_m__[Changes]/shelved.patch" />
-----  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2023-02-09 12:18 p.m. [Changes]" />
-----</changelist>
----\ No newline at end of file
----Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-02-09_12_18_p_m__[Changes]/shelved.patch
----===================================================================
----diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-02-09_12_18_p_m__[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-02-09_12_18_p_m__[Changes]/shelved.patch
----deleted file mode 100644
------- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-02-09_12_18_p_m__[Changes]/shelved.patch	(revision 70ec60027de6bb59a0951349bcd6bf7c7662fa76)
----+++ /dev/null	(revision 70ec60027de6bb59a0951349bcd6bf7c7662fa76)
----@@ -1,254 +0,0 @@
-----Index: src/main/ui/ConsoleInterface.java
-----IDEA additional info:
-----Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-----<+>package ui;\r\n\r\nimport model.Card;\r\nimport model.CardSet;\r\nimport model.CardSetsMenu;\r\nimport model.CardSide;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\n// TODO: add comments for ui methods\r\n// The main console user interface of the flashcard application.\r\npublic class ConsoleInterface {\r\n    private final Scanner sc = new Scanner(System.in);\r\n    private CardSetsMenu cardSetsMenu;\r\n\r\n    // EFFECTS: instantiate a new console interface with a loaded CarSetMenu\r\n    public ConsoleInterface(CardSetsMenu csm) {\r\n        this.cardSetsMenu = csm;\r\n        start();\r\n    }\r\n\r\n    // TODO: refactor to use this function\r\n    private String getStringInput() {\r\n        return sc.nextLine();\r\n    }\r\n\r\n    // EFFECTS: return the integer user input\r\n    private int getIntInput() {\r\n        int choice = sc.nextInt();\r\n        sc.nextLine();\r\n        return choice;\r\n    }\r\n\r\n    // EFFECTS: begin the starting menu of the program\r\n    private void start() {\r\n        while (true) {\r\n            System.out.println(\"Hello, welcome to CPSC \\n What would you like to do?\");\r\n            System.out.println(\"1. View card sets\");\r\n            System.out.println(\"2. Make new card set\");\r\n            System.out.println(\"0. exit\");\r\n            int choice = getIntInput();\r\n            if (choice == 1) {\r\n                seeCardSet();\r\n            } else if (choice == 2) {\r\n                makeNewCardSet();\r\n            } else if (choice == 0) {\r\n                System.out.println(\"Thanks for using CPSC, bye bye!!\");\r\n                break;\r\n            } else {\r\n                System.out.println(choice + \" is not a valid option, please input 1 or 2\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // EFFECTS: lead user to create menu if there are no cardsets\r\n    private void seeCardSetEmpty() {\r\n        while (true) {\r\n            System.out.println(\"You have no card sets, would you like to make a new one?\");\r\n            System.out.println(\"1. Make a new card set\");\r\n            System.out.println(\"0. go back\");\r\n            int choice = getIntInput();\r\n            if (choice == 1) {\r\n                makeNewCardSet();\r\n            } else if (choice == 0) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // EFFECTS: display menu to pick action for a chosen card set\r\n    private void cardSetSelected(CardSet currentCardSet) {\r\n        while (true) {\r\n            System.out.println(\"What do you want to do with card set, \" + \"'\" + currentCardSet.getTitle() + \"'\");\r\n            System.out.println(\"1. Review card set\\n2. Edit card set\\n3. Delete card set\\n4. View card set stats\");\r\n            System.out.println(\"0. go back\");\r\n            currentCardSet.incrementUseCount();\r\n            int csChoice = getIntInput();\r\n            if (csChoice == 1) {\r\n                reviewCardSet(currentCardSet);\r\n            } else if (csChoice == 2) {\r\n                editCardSet(currentCardSet);\r\n            } else if (csChoice == 3) {\r\n                cardSetsMenu.deleteCardSet(currentCardSet);\r\n                break;\r\n            } else if (csChoice == 4) {\r\n                seeCardStats(currentCardSet);\r\n            } else if (csChoice == 0) {\r\n                break;\r\n            } else {\r\n                System.out.println(csChoice + \" is not a valid choice, please pick again\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // EFFECTS: display the stats of the cardset, including the accuracy of each card and how much the cardset is used\r\n    private void seeCardStats(CardSet currentCardSet) {\r\n        System.out.println(\"The cardset '\" + currentCardSet.getTitle() + \"' has been used \"\r\n                + currentCardSet.getUseCount() + \" times. It is currently \"\r\n                + (currentCardSet.getAverageAccuracy() * 100) + \"% accurate\");\r\n        int i = 0;\r\n        for (Card c : currentCardSet.getCards()) {\r\n            i++;\r\n            System.out.println(\"Card \" + i + \": \");\r\n            System.out.println(c.getFront().getContent() + \" : \" + c.getBack().getContent());\r\n            int sum = (c.getCorrectCount() + c.getWrongCount());\r\n            if (sum != 0) {\r\n                System.out.println(\"Reviewed: \" + (c.getCorrectCount() + c.getWrongCount()) + \" times; \"\r\n                        + \"Accuracy: \" + (c.getAccuracy() * 100) + \"%\");\r\n            } else {\r\n                System.out.println(\"This Card has not been reviewed yet\");\r\n            }\r\n        }\r\n        System.out.println(\"\");\r\n    }\r\n\r\n    // EFFECTS: display the cards inside a cardset\r\n    private void seeCardSet() {\r\n        if (this.cardSetsMenu.getCardSets().size() == 0) {\r\n            seeCardSetEmpty();\r\n        } else {\r\n            while (true) {\r\n                this.cardSetsMenu.sortCardSet();\r\n                int count = 0;\r\n                for (CardSet cs : this.cardSetsMenu.getCardSets()) {\r\n                    count += 1;\r\n                    System.out.println(count + \". \" + cs.getTitle());\r\n                }\r\n                System.out.println(\"0. go back\");\r\n                System.out.println(\"Which card set would you like to select?\");\r\n                int choice = getIntInput();\r\n                if (choice <= count && choice >= 1) {\r\n                    cardSetSelected(cardSetsMenu.getCardSet(choice - 1));\r\n                } else if (choice == 0) {\r\n                    break;\r\n                } else {\r\n                    System.out.println(choice + \" is not a valid choice, please pick again\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // EFFECTS: create new cardset and add it to the menu\r\n    private void makeNewCardSet() {\r\n        CardSet newCardSet;\r\n        while (true) {\r\n            System.out.println(\"Card set maker:\\nWhat is the title of this card set?\");\r\n            String title = sc.nextLine();\r\n            if (cardSetsMenu.containsCardSetWithName(title)) {\r\n                System.out.println(\"A card set already has the title: \" + \"\\\"\" + title + \"\\\"\\nPlease try again\");\r\n            } else {\r\n                newCardSet = new CardSet(title);\r\n                cardSetsMenu.addCardSet(newCardSet);\r\n                break;\r\n            }\r\n        }\r\n        while (true) {\r\n            System.out.println(\"1. add new card\\n0. go back\");\r\n            int cardChoice = getIntInput();\r\n            if (cardChoice == 1) {\r\n                makeNewCard(newCardSet);\r\n            } else if (cardChoice == 0) {\r\n                break;\r\n            } else {\r\n                System.out.println(cardChoice + \" is not a valid option, please try again\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // EFFECTS: create and adds new card to a cardset\r\n    private void makeNewCard(CardSet newCardSet) {\r\n        System.out.println(\"Enter the value for the front of the card\");\r\n        String frontText = sc.nextLine();\r\n        System.out.println(\"Enter the value for the back of the card\");\r\n        String backText = sc.nextLine();\r\n        CardSide front = new CardSide();\r\n        CardSide back = new CardSide();\r\n        front.setContent(frontText);\r\n        back.setContent(backText);\r\n        Card newCard = new Card(front, back);\r\n        newCardSet.addCard(newCard);\r\n        System.out.println(\"New card added\");\r\n    }\r\n\r\n    // EFFECTS: display the review options for a cardset\r\n    private boolean checkReviewType(CardSet currentCardSet) {\r\n        while (true) {\r\n            System.out.println(\"Do you want to show the front or the back first?\");\r\n            System.out.println(\"1. front\");\r\n            System.out.println(\"2. back\");\r\n            System.out.println(\"0. exit review\");\r\n            int choice = getIntInput();\r\n            if (choice == 1) {\r\n                currentCardSet.setCardFlippedState(false);\r\n                break;\r\n            } else if (choice == 2) {\r\n                currentCardSet.setCardFlippedState(true);\r\n                break;\r\n            } else if (choice == 0) {\r\n                return false;\r\n            } else {\r\n                System.out.println(choice + \" is not a valid option, please try again\");\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // EFFECTS: start the review process for a cardset\r\n    private void reviewCardSet(CardSet currentCardSet) {\r\n        boolean cont = checkReviewType(currentCardSet);\r\n        if (cont) {\r\n            System.out.println(\"Press enter to begin\");\r\n            sc.nextLine();\r\n            ArrayList<Card> mixedCards = currentCardSet.getMixedCards();\r\n            boolean exit = false;\r\n            for (Card c : mixedCards) {\r\n                System.out.println(\"\\n\" + c.getCardFace().getContent() + \"\\nType your answer or just press enter\");\r\n                sc.nextLine();\r\n                c.flip();\r\n                System.out.println(c.getCardFace().getContent());\r\n                exit = verifyCardCorrectnessHelper(c);\r\n                if (exit) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // EFFECTS: displays options for a card after review process\r\n    //          allows user to check whether they got it correct, wrong, or want to exit\r\n    private boolean verifyCardCorrectnessHelper(Card c) {\r\n        while (true) {\r\n            System.out.println(\"Were you correct? \\n1. correct; 2. wrong; 0.to exit review\");\r\n            int choice = getIntInput();\r\n            if (choice == 1) {\r\n                c.incrementCorrectCount();\r\n                break;\r\n            } else if (choice == 2) {\r\n                c.incrementWrongCount();\r\n                break;\r\n            } else if (choice == 0) {\r\n                return true;\r\n            } else {\r\n                System.out.println(choice + \" is not valid, please try again\");\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // EFFECTS: display options to edit a cardset\r\n    private void editCardSet(CardSet currentCardSet) {\r\n        while (true) {\r\n            System.out.println(\"How do you want to edit the card set, \" + \"'\" + currentCardSet.getTitle() + \"'\");\r\n            System.out.println(\"1. add new card\");\r\n            System.out.println(\"2. Edit Card\");\r\n            System.out.println(\"3. Delete Card\");\r\n            System.out.println(\"0. go back\");\r\n            int choice = getIntInput();\r\n            if (choice == 1) {\r\n                makeNewCard(currentCardSet);\r\n            } else if (choice == 2) {\r\n                editCardSetViewCards(currentCardSet);\r\n            } else if (choice == 3) {\r\n                deleteCardSetViewCards(currentCardSet);\r\n            } else if (choice == 0) {\r\n                break;\r\n            } else {\r\n                System.out.println(choice + \" is not a valid input, please try again\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // EFFECTS: display options to view and delete the card in a cardset\r\n    private void deleteCardSetViewCards(CardSet currentCardSet) {\r\n        while (true) {\r\n            ArrayList<Card> cards = currentCardSet.getCards();\r\n            int i = 1;\r\n            for (Card c : cards) {\r\n                System.out.println(\"Card \" + i + \":\");\r\n                System.out.println(c.getFront().getContent() + \" : \" + c.getBack().getContent());\r\n                i++;\r\n            }\r\n            System.out.println(\"Which card do you want to delete? (enter 0 to exit)\");\r\n            int choice = getIntInput();\r\n            if (choice >= 1 && choice <= i) {\r\n                currentCardSet.deleteCard(choice - 1);\r\n            } else if (choice == 0) {\r\n                break;\r\n            } else {\r\n                System.out.println(choice + \" is not a valid option, please pick again\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // EFFECTS: display options to see cards, and pick a card to edit in a cardset\r\n    private void editCardSetViewCards(CardSet currentCardSet) {\r\n        while (true) {\r\n            ArrayList<Card> cards = currentCardSet.getCards();\r\n            int i = 1;\r\n            for (Card c : cards) {\r\n                System.out.println(\"Card \" + i + \":\");\r\n                System.out.println(c.getFront().getContent() + \" : \" + c.getBack().getContent());\r\n                i++;\r\n            }\r\n            System.out.println(\"Which card do you want to edit? (enter 0 to stop editing)\");\r\n            int choice = getIntInput();\r\n            if (choice >= 1 && choice <= i) {\r\n                editCard(currentCardSet, choice - 1);\r\n            } else if (choice == 0) {\r\n                break;\r\n            } else {\r\n                System.out.println(choice + \" is not a valid option, please pick again\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // EFFECTS: display the options to change a card at index i in a cardset\r\n    private void editCard(CardSet c, int i) {\r\n        Card card = c.getCardByIndex(i);\r\n        CardSide cardFront = card.getFront();\r\n        CardSide cardBack = card.getBack();\r\n        System.out.println(\"The front of the card is: \");\r\n        System.out.println(cardFront.getContent());\r\n        System.out.println(\"Do you want to change this side?\");\r\n        changeCardSide(cardFront);\r\n        System.out.println(\"The back of the card is: \");\r\n        System.out.println(cardBack.getContent());\r\n        System.out.println(\"Do you want to change this side?\");\r\n        changeCardSide(cardBack);\r\n    }\r\n\r\n    private void changeCardSide(CardSide cs) {\r\n        while (true) {\r\n            System.out.println(\"1. yes\");\r\n            System.out.println(\"2. no\");\r\n            int choice = getIntInput();\r\n            if (choice == 1) {\r\n                System.out.println(\"Enter the new content for this card face:\");\r\n                String content = sc.nextLine();\r\n                cs.setContent(content);\r\n                break;\r\n            } else if (choice == 2) {\r\n                break;\r\n            } else {\r\n                System.out.println(choice + \" is not a valid option, please try again\");\r\n            }\r\n        }\r\n    }\r\n}\r\n
-----Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-----<+>UTF-8
-----===================================================================
-----diff --git a/src/main/ui/ConsoleInterface.java b/src/main/ui/ConsoleInterface.java
-------- a/src/main/ui/ConsoleInterface.java	(revision bb62ceff42222d39514e15eb26d8798d911267ff)
-----+++ b/src/main/ui/ConsoleInterface.java	(date 1675973904055)
-----@@ -8,7 +8,6 @@
----- import java.util.ArrayList;
----- import java.util.Scanner;
----- 
------// TODO: add comments for ui methods
----- // The main console user interface of the flashcard application.
----- public class ConsoleInterface {
-----     private final Scanner sc = new Scanner(System.in);
-----@@ -20,12 +19,7 @@
-----         start();
-----     }
----- 
------    // TODO: refactor to use this function
------    private String getStringInput() {
------        return sc.nextLine();
------    }
------
------    // EFFECTS: return the integer user input
-----+    // EFFECTS: return the integer user input, and absorbs the \n character as a result from enter key.
-----     private int getIntInput() {
-----         int choice = sc.nextInt();
-----         sc.nextLine();
-----@@ -41,7 +35,7 @@
-----             System.out.println("0. exit");
-----             int choice = getIntInput();
-----             if (choice == 1) {
------                seeCardSet();
-----+                seeCardSets();
-----             } else if (choice == 2) {
-----                 makeNewCardSet();
-----             } else if (choice == 0) {
-----@@ -72,7 +66,7 @@
-----     private void cardSetSelected(CardSet currentCardSet) {
-----         while (true) {
-----             System.out.println("What do you want to do with card set, " + "'" + currentCardSet.getTitle() + "'");
------            System.out.println("1. Review card set\n2. Edit card set\n3. Delete card set\n4. View card set stats");
-----+            System.out.println("1. Review card set\n2. Edit card set\n3. Delete card set\n4. View card set contents");
-----             System.out.println("0. go back");
-----             currentCardSet.incrementUseCount();
-----             int csChoice = getIntInput();
-----@@ -114,8 +108,8 @@
-----         System.out.println("");
-----     }
----- 
------    // EFFECTS: display the cards inside a cardset
------    private void seeCardSet() {
-----+    // EFFECTS: display the cardsets inside a cardsetmenu and allow users to select a given cardset
-----+    private void seeCardSets() {
-----         if (this.cardSetsMenu.getCardSets().size() == 0) {
-----             seeCardSetEmpty();
-----         } else {
-----@@ -140,7 +134,7 @@
-----         }
-----     }
----- 
------    // EFFECTS: create new cardset and add it to the menu
-----+    // EFFECTS: create new cardset and add it to the menu, also allow users to add new cards in the cardset
-----     private void makeNewCardSet() {
-----         CardSet newCardSet;
-----         while (true) {
-----@@ -247,7 +241,8 @@
-----         return false;
-----     }
----- 
------    // EFFECTS: display options to edit a cardset
-----+    // EFFECTS: display options to edit a cardset:
-----+    //           add new card, delete card, edit card, or go back
-----     private void editCardSet(CardSet currentCardSet) {
-----         while (true) {
-----             System.out.println("How do you want to edit the card set, " + "'" + currentCardSet.getTitle() + "'");
-----@@ -329,6 +324,7 @@
-----         changeCardSide(cardBack);
-----     }
----- 
-----+    // EFFECTS: change the content of a cardside
-----     private void changeCardSide(CardSide cs) {
-----         while (true) {
-----             System.out.println("1. yes");
-----Index: src/main/model/CardSetsMenu.java
-----IDEA additional info:
-----Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-----<+>package model;\r\n\r\nimport java.util.ArrayList;\r\n\r\n// CardSetsMenu is a collection of cardsets. It stores and organizes multiple flashcard sets.\r\npublic class CardSetsMenu {\r\n    private ArrayList<CardSet> cardSets;\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: instantiate new cardset menu with empty cardsets\r\n    public CardSetsMenu() {\r\n        this.cardSets = new ArrayList<>();\r\n    }\r\n\r\n    // REQUIRES: the cardset title does not already exist in the list of cardsets\r\n    // MODIFIES: this\r\n    // EFFECTS: adds a cardset to the existing cardset menu\r\n    public void addCardSet(CardSet cardSet) {\r\n        this.cardSets.add(cardSet);\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: reorders the list of cardsets in the order of most commonly used\r\n    public void sortCardSet() {\r\n        this.cardSets.sort((cs1, cs2) -> Integer.compare(-cs1.getUseCount(), -cs2.getUseCount()));\r\n    }\r\n\r\n\r\n    // EFFECTS: returns true if name already exists in the list of cardsets\r\n    public Boolean containsCardSetWithName(String name) {\r\n        return cardSets.contains(new CardSet(name));\r\n    }\r\n\r\n    // REQUIRES: i must be a valid index of cardsets (0 <= i <= getCardSetLength()-1)\r\n    // EFFECTS: get cardset in cardmenu with index i\r\n    public CardSet getCardSet(int i) {\r\n        return cardSets.get(i);\r\n    }\r\n\r\n    // REQUIRES: cardset title must be a valid and exists in the menu\r\n    // EFFECTS: get cardset in cardmenu with title, if name does not match any cardset, return null\r\n    public CardSet getCardSet(String title) {\r\n        for (CardSet cs: this.cardSets) {\r\n            if (cs.getTitle().equals(title)) {\r\n                return cs;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // REQUIRES: i must be an index of menu (0 <= i <= getCardSetLength()-1)\r\n    // MODIFIES: this\r\n    // EFFECTS: remove cardset in menu by index\r\n    public void deleteCardSet(int i) {\r\n        this.cardSets.remove(i);\r\n    }\r\n\r\n    // REQUIRES: cs must be a member of the menu\r\n    // MODIFIES: this\r\n    // EFFFECTS: removes cardet cs from menu\r\n    public void deleteCardSet(CardSet cs) {\r\n        this.cardSets.remove(cs);\r\n    }\r\n\r\n    // EFFECTS: return the size of the menu\r\n    public int getCardSetLength() {\r\n        return this.cardSets.size();\r\n    }\r\n\r\n    public void setCardSets(ArrayList<CardSet> cardSet) {\r\n        this.cardSets = cardSet;\r\n    }\r\n\r\n    public ArrayList<CardSet> getCardSets() {\r\n        return this.cardSets;\r\n    }\r\n}\r\n
-----Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-----<+>UTF-8
-----===================================================================
-----diff --git a/src/main/model/CardSetsMenu.java b/src/main/model/CardSetsMenu.java
-------- a/src/main/model/CardSetsMenu.java	(revision bb62ceff42222d39514e15eb26d8798d911267ff)
-----+++ b/src/main/model/CardSetsMenu.java	(date 1675972995510)
-----@@ -2,7 +2,8 @@
----- 
----- import java.util.ArrayList;
----- 
------// CardSetsMenu is a collection of cardsets. It stores and organizes multiple flashcard sets.
-----+// CardSetsMenu is a collection of cardsets. It stores and organizes multiple flashcard sets and it behaves
-----+// as the main menu for the user.
----- public class CardSetsMenu {
-----     private ArrayList<CardSet> cardSets;
----- 
-----@@ -20,12 +21,11 @@
-----     }
----- 
-----     // MODIFIES: this
------    // EFFECTS: reorders the list of cardsets in the order of most commonly used
-----+    // EFFECTS: sorts the list of cardsets in the order of most commonly used (greatest usecount)
-----     public void sortCardSet() {
-----         this.cardSets.sort((cs1, cs2) -> Integer.compare(-cs1.getUseCount(), -cs2.getUseCount()));
-----     }
----- 
------
-----     // EFFECTS: returns true if name already exists in the list of cardsets
-----     public Boolean containsCardSetWithName(String name) {
-----         return cardSets.contains(new CardSet(name));
-----@@ -37,7 +37,7 @@
-----         return cardSets.get(i);
-----     }
----- 
------    // REQUIRES: cardset title must be a valid and exists in the menu
-----+    // REQUIRES: cardset title must be valid and exists in the menu
-----     // EFFECTS: get cardset in cardmenu with title, if name does not match any cardset, return null
-----     public CardSet getCardSet(String title) {
-----         for (CardSet cs: this.cardSets) {
-----@@ -67,6 +67,7 @@
-----         return this.cardSets.size();
-----     }
----- 
-----+    // simple getters and setters
-----     public void setCardSets(ArrayList<CardSet> cardSet) {
-----         this.cardSets = cardSet;
-----     }
-----Index: src/main/model/CardSet.java
-----IDEA additional info:
-----Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-----<+>package model;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Random;\r\n\r\n// Cardset represents a set of two-sided cards. It is essentially a unique set of flashcards with a title.\r\n// It also contains how many times this cardset has been selected.\r\npublic class CardSet {\r\n\r\n    private final ArrayList<Card> cards;\r\n    private final String title;\r\n    private int useCount;\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: instantiate new CardSet object\r\n    public CardSet(String title) {\r\n        this.title = title;\r\n        this.cards = new ArrayList<Card>();\r\n        this.useCount = 0;\r\n    }\r\n\r\n    // EFFECT: return a CardSet with the cards in a random order\r\n    public ArrayList<Card> getMixedCards() {\r\n        ArrayList<Card> cardsCopy = new ArrayList<Card>(cards);\r\n        Random rand = new Random();\r\n        for (int i = 0; i < cardsCopy.size(); i++) {\r\n            int randomIndexToSwap = rand.nextInt(cardsCopy.size());\r\n            Card temp = cardsCopy.get(randomIndexToSwap);\r\n            cardsCopy.set(randomIndexToSwap, cardsCopy.get(i));\r\n            cardsCopy.set(i, temp);\r\n        }\r\n        return cardsCopy;\r\n    }\r\n\r\n    // TODO: create a sorting algorithm that utilize correctness to have a targeted study mode\r\n    //  (a variation of the SuperMemo algorithm) --> for next P2 !!\r\n    // EFFECTS: return a weighted sorting of each card based on the correctness\r\n    // public ArrayList<Card> getWeightedMixedCards() {}\r\n\r\n\r\n    // MODIFIES: this\r\n    // EFFECT: sets the card state of all cards in the cardSet to the specified state\r\n    public void setCardFlippedState(Boolean state) {\r\n        for (Card c : cards) {\r\n            c.setState(state);\r\n        }\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECT: increase use count by one\r\n    public void incrementUseCount() {\r\n        this.useCount += 1;\r\n    }\r\n\r\n    // TODO: this function might change with the implementation of the SuperMemo Algorithm\r\n    // EFFECTS: returns the overall completeness of the cardset (average of the accuracy of each reviewed card)\r\n    // A card is considered to have 0 completeness if it is not reviewed.\r\n    public double getAverageAccuracy() {\r\n        double sum = 0;\r\n        for (Card c : this.cards) {\r\n            if (c.getAccuracy() != (double) -1) {\r\n                sum += c.getAccuracy();\r\n            }\r\n        }\r\n        return sum / this.getCardSetLength();\r\n    }\r\n\r\n    // EFFECT: overrides equals method from super class, such that it compares equality of\r\n    // cardsets by comparing titles only\r\n    @Override\r\n    public boolean equals(Object that) {\r\n        if (that instanceof CardSet) {\r\n            return this.title.equals(((CardSet) that).getTitle());\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: adds a card to the cardset\r\n    public void addCard(Card c) {\r\n        cards.add(c);\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: delete card at index i from cardset\r\n    public void deleteCard(int i) {\r\n        this.cards.remove(i);\r\n    }\r\n\r\n    // MODIFES: this\r\n    // EFFECTS: delete card c from cardset\r\n    public void deleteCard(Card c) {\r\n        this.cards.remove(c);\r\n    }\r\n\r\n    // EFFECTS: gets card in cardset of index i\r\n    public Card getCardByIndex(int i) {\r\n        return cards.get(i);\r\n    }\r\n\r\n    // EFFECTS: return the amount of cards in the cardset\r\n    public int getCardSetLength() {\r\n        return cards.size();\r\n    }\r\n\r\n    public int getUseCount() {\r\n        return this.useCount;\r\n    }\r\n\r\n    public void setUseCount(int useCount) {\r\n        this.useCount = useCount;\r\n    }\r\n\r\n    public ArrayList<Card> getCards() {\r\n        return cards;\r\n    }\r\n\r\n    public String getTitle() {\r\n        return title;\r\n    }\r\n}\r\n
-----Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-----<+>UTF-8
-----===================================================================
-----diff --git a/src/main/model/CardSet.java b/src/main/model/CardSet.java
-------- a/src/main/model/CardSet.java	(revision bb62ceff42222d39514e15eb26d8798d911267ff)
-----+++ b/src/main/model/CardSet.java	(date 1675972601404)
-----@@ -33,11 +33,10 @@
-----     }
----- 
-----     // TODO: create a sorting algorithm that utilize correctness to have a targeted study mode
------    //  (a variation of the SuperMemo algorithm) --> for next P2 !!
-----+    //  (a variation of the SuperMemo algorithm) --> for next phase !!
-----     // EFFECTS: return a weighted sorting of each card based on the correctness
-----     // public ArrayList<Card> getWeightedMixedCards() {}
----- 
------
-----     // MODIFIES: this
-----     // EFFECT: sets the card state of all cards in the cardSet to the specified state
-----     public void setCardFlippedState(Boolean state) {
-----@@ -53,8 +52,8 @@
-----     }
----- 
-----     // TODO: this function might change with the implementation of the SuperMemo Algorithm
------    // EFFECTS: returns the overall completeness of the cardset (average of the accuracy of each reviewed card)
------    // A card is considered to have 0 completeness if it is not reviewed.
-----+    // EFFECTS: returns the overall accuracy of the cardset (average of the accuracy of each reviewed card)
-----+    // A card is considered to have 0 accuracy if it is not reviewed.
-----     public double getAverageAccuracy() {
-----         double sum = 0;
-----         for (Card c : this.cards) {
-----@@ -103,6 +102,7 @@
-----         return cards.size();
-----     }
----- 
-----+    // simple getters and setters
-----     public int getUseCount() {
-----         return this.useCount;
-----     }
-----Index: src/main/model/Card.java
-----IDEA additional info:
-----Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-----<+>package model;\r\n\r\n// Card represents a two-sided flash card. Each card contains information of each side, whether it is flipped or not,\r\n// and how often the user reviews this card correctly.\r\npublic class Card {\r\n    private final CardSide front;\r\n    private final CardSide back;\r\n    private boolean state;\r\n    // TODO: utilize correctness to have a targeted study mode (a variation of the SuperMemo algorithm)\r\n    private int correctCount;\r\n    private int wrongCount;\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: instantiate new Card object\r\n    public Card(CardSide front, CardSide back) {\r\n        this.front = front;\r\n        this.back = back;\r\n        this.state = false;\r\n        this.correctCount = 0;\r\n        this.wrongCount = 0;\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: flips the card state; front -> back and vice versa\r\n    public void flip() {\r\n        this.state = !this.state;\r\n    }\r\n\r\n    // EFFECTS: returns which face is facing up (front if false. back if true)\r\n    public CardSide getCardFace() {\r\n        if (!this.state) {\r\n            return this.front;\r\n        } else {\r\n            return this.back;\r\n        }\r\n    }\r\n\r\n    // EFFECTS: returns the decimal percentage of the accuracy of this card. If card has not been reviewed, return -1\r\n    public double getAccuracy() {\r\n        double sum = this.correctCount + this.wrongCount;\r\n        if (sum != 0) {\r\n            return (double) this.correctCount / sum;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    // EFFECTS: increase correct count by 1\r\n    public void incrementCorrectCount() {\r\n        this.correctCount += 1;\r\n    }\r\n\r\n    // EFFECTS: increase wrong count by 1\r\n    public void incrementWrongCount() {\r\n        this.wrongCount += 1;\r\n    }\r\n\r\n    public CardSide getFront() {\r\n        return front;\r\n    }\r\n\r\n    public int getCorrectCount() {\r\n        return this.correctCount;\r\n    }\r\n\r\n    public int getWrongCount() {\r\n        return this.wrongCount;\r\n    }\r\n\r\n    public CardSide getBack() {\r\n        return back;\r\n    }\r\n\r\n    public boolean getState() {\r\n        return state;\r\n    }\r\n\r\n    public void setState(Boolean s) {\r\n        this.state = s;\r\n    }\r\n}\r\n
-----Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-----<+>UTF-8
-----===================================================================
-----diff --git a/src/main/model/Card.java b/src/main/model/Card.java
-------- a/src/main/model/Card.java	(revision bb62ceff42222d39514e15eb26d8798d911267ff)
-----+++ b/src/main/model/Card.java	(date 1675972601357)
-----@@ -21,12 +21,12 @@
-----     }
----- 
-----     // MODIFIES: this
------    // EFFECTS: flips the card state; front -> back and vice versa
-----+    // EFFECTS: flips the card state; false -> true and vice versa
-----     public void flip() {
-----         this.state = !this.state;
-----     }
----- 
------    // EFFECTS: returns which face is facing up (front if false. back if true)
-----+    // EFFECTS: returns which face is facing up (front if state  = false. back if state = true)
-----     public CardSide getCardFace() {
-----         if (!this.state) {
-----             return this.front;
-----@@ -44,16 +44,19 @@
-----         return -1;
-----     }
----- 
-----+    // MODIFIES: this
-----     // EFFECTS: increase correct count by 1
-----     public void incrementCorrectCount() {
-----         this.correctCount += 1;
-----     }
----- 
-----+    // MODIFIES: this
-----     // EFFECTS: increase wrong count by 1
-----     public void incrementWrongCount() {
-----         this.wrongCount += 1;
-----     }
----- 
-----+    // simple getters and setters
-----     public CardSide getFront() {
-----         return front;
-----     }
-----Index: src/main/model/CardSide.java
-----IDEA additional info:
-----Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-----<+>package model;\r\n\r\nimport java.awt.*;\r\n\r\n// CardSide is a single side of a two-sided flashcard. Each card side will contain graphical information of\r\n// how the card side will be displayed, this will be implemented later on in the gui stage.\r\npublic class CardSide {\r\n    //TODO: create image and text editing interface during GUI stage\r\n\r\n    private String content;\r\n    private Color fontColor;\r\n    private Color backgroundColor;\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: insantiate new cardside with no content, black text color, and white background\r\n    public CardSide() {\r\n        this.content = \"\";\r\n        this.fontColor = new Color(0,0,0);\r\n        this.backgroundColor = new Color(255,255,255);\r\n    }\r\n\r\n    public void setContent(String c) {\r\n        this.content = c;\r\n    }\r\n\r\n    public void setFontColor(Color c) {\r\n        this.fontColor = c;\r\n    }\r\n\r\n    public void setBackgroundColor(Color c) {\r\n        this.backgroundColor = c;\r\n    }\r\n\r\n    public String getContent() {\r\n        return content;\r\n    }\r\n\r\n    public Color getFontColor() {\r\n        return this.fontColor;\r\n    }\r\n\r\n    public Color getBackgroundColor() {\r\n        return this.backgroundColor;\r\n    }\r\n\r\n}\r\n
-----Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-----<+>UTF-8
-----===================================================================
-----diff --git a/src/main/model/CardSide.java b/src/main/model/CardSide.java
-------- a/src/main/model/CardSide.java	(revision bb62ceff42222d39514e15eb26d8798d911267ff)
-----+++ b/src/main/model/CardSide.java	(date 1675972995548)
-----@@ -5,8 +5,7 @@
----- // CardSide is a single side of a two-sided flashcard. Each card side will contain graphical information of
----- // how the card side will be displayed, this will be implemented later on in the gui stage.
----- public class CardSide {
------    //TODO: create image and text editing interface during GUI stage
------
-----+    // TODO: create image and text editing interface during GUI stage
-----     private String content;
-----     private Color fontColor;
-----     private Color backgroundColor;
-----@@ -19,6 +18,7 @@
-----         this.backgroundColor = new Color(255,255,255);
-----     }
----- 
-----+    // simple getters and setters
-----     public void setContent(String c) {
-----         this.content = c;
-----     }
---Index: .idea/shelf/Uncommitted_changes_before_Update_at_2_27_2023_11_01_PM_[Changes]/shelved.patch
---===================================================================
---diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2_27_2023_11_01_PM_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2_27_2023_11_01_PM_[Changes]/shelved.patch
---deleted file mode 100644
------ a/.idea/shelf/Uncommitted_changes_before_Update_at_2_27_2023_11_01_PM_[Changes]/shelved.patch	(revision 799a019e4190fb3d9bf8a2c8c2d12f9dc88abadf)
---+++ /dev/null	(revision 799a019e4190fb3d9bf8a2c8c2d12f9dc88abadf)
---@@ -1,18 +0,0 @@
----Index: src/main/ui/ConsoleInterface.java
----IDEA additional info:
----Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
----<+>package ui;\r\n\r\nimport model.Card;\r\nimport model.CardSet;\r\nimport model.CardSetsMenu;\r\nimport model.CardSide;\r\nimport persistence.JsonReader;\r\nimport persistence.JsonWriter;\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.InputMismatchException;\r\nimport java.util.Scanner;\r\n\r\n// The main console user interface of the flashcard application.\r\npublic class ConsoleInterface {\r\n    private final Scanner sc = new Scanner(System.in);\r\n    private static final String JSON_STORE = \"./data/csm.cpsc\";\r\n    private static final String CARDSET_FOLDER = \"./data/CardSets/\";\r\n    private final CardSetsMenu cardSetsMenu;\r\n\r\n    // EFFECTS: instantiate a new console interface with a loaded CarSetMenu\r\n    public ConsoleInterface() {\r\n        this.cardSetsMenu = readCardSetMenu();\r\n        //generateTestSets(this.cardSetsMenu);\r\n        start();\r\n    }\r\n\r\n    //EFFECTS: A function to generate cardsets to help user testing.\r\n    private void generateTestSets(CardSetsMenu csm) {\r\n        for (int i = 1; i <= 10; i++) {\r\n            csm.addCardSet(generateTestCards(i));\r\n            ConsoleInterface.saveCardSet(generateTestCards(i));\r\n        }\r\n        saveCardSetMenu(csm);\r\n    }\r\n\r\n    //EFFECTS:  A function used to generate cards in a cardset for user testing\r\n    private CardSet generateTestCards(int i) {\r\n        CardSet testCardSet = new CardSet(\"Card set \" + i);\r\n        for (int j = 1; j < 9; j++) {\r\n            CardSide front = new CardSide();\r\n            CardSide back = new CardSide();\r\n            front.setContent(\"Set \" + i + \" Front \" + j);\r\n            back.setContent(\"Set \" + i + \" Back \" + j);\r\n            Card testCard = new Card(front, back);\r\n            testCardSet.addCard(testCard);\r\n\r\n        }\r\n        return testCardSet;\r\n    }\r\n\r\n    // EFFECTS: saves the CardSetMenu to file\r\n    public static void saveCardSetMenu(CardSetsMenu csm) {\r\n        JsonWriter jsonWriter = new JsonWriter(JSON_STORE);\r\n        try {\r\n            jsonWriter.open();\r\n            jsonWriter.write(csm);\r\n            jsonWriter.close();\r\n            //System.out.println(\"Saved CardSetMenu to \" + JSON_STORE);\r\n        } catch (FileNotFoundException e) {\r\n            try {\r\n                (new File(JSON_STORE)).createNewFile();\r\n                jsonWriter.open();\r\n            } catch (IOException ex) {\r\n                throw new RuntimeException(ex);\r\n            }\r\n            jsonWriter.write(csm);\r\n            jsonWriter.close();\r\n            //System.out.println(\"Saved CardSetMenu to \" + JSON_STORE);\r\n        }\r\n    }\r\n\r\n    // TODO: remove weird symbols from name.\r\n    // TODO: prevent the weird symbols in name in the first place.\r\n    // EFFECTS: saves the cardSet to file\r\n    public static void saveCardSet(CardSet cs) {\r\n        String title = cs.getTitle();\r\n        String fileName = CARDSET_FOLDER + title + \".cpsc\";\r\n        JsonWriter jsonWriter = new JsonWriter(fileName);\r\n        try {\r\n            jsonWriter.open();\r\n            jsonWriter.write(cs);\r\n            jsonWriter.close();\r\n            //System.out.println(\"Saved cardset to \" + fileName);\r\n        } catch (FileNotFoundException e) {\r\n            try {\r\n                (new File(fileName)).createNewFile();\r\n                jsonWriter.open();\r\n            } catch (IOException ex) {\r\n                throw new RuntimeException(ex);\r\n            }\r\n            jsonWriter.write(cs);\r\n            jsonWriter.close();\r\n            //System.out.println(\"Saved cardset to \" + fileName);\r\n        }\r\n    }\r\n\r\n    public static CardSetsMenu readCardSetMenu() {\r\n        JsonReader jsonReader = new JsonReader(JSON_STORE);\r\n        try {\r\n            //System.out.println(\"Menu read\");\r\n            return jsonReader.readCardSetMenu();\r\n        } catch (IOException e) {\r\n            try {\r\n                (new File(JSON_STORE)).createNewFile();\r\n            } catch (IOException ex) {\r\n                throw new RuntimeException(ex);\r\n            }\r\n            //System.out.println(\"file, not found, empty menu returned\");\r\n            return new CardSetsMenu();\r\n        }\r\n    }\r\n\r\n    public static CardSet readCardSet(String title) {\r\n        String fileName = CARDSET_FOLDER + title + \".cpsc\";\r\n        JsonReader jsonReader = new JsonReader(fileName);\r\n        try {\r\n            return jsonReader.readCardSet();\r\n        } catch (IOException e) {\r\n            try {\r\n                (new File(JSON_STORE)).createNewFile();\r\n            } catch (IOException ex) {\r\n                throw new RuntimeException(ex);\r\n            }\r\n            //System.out.println(\"file, not found, empty menu returned\");\r\n            return new CardSet(title);\r\n        }\r\n    }\r\n\r\n    private void deleteCardSet(CardSet cs) {\r\n        File f = new File(CARDSET_FOLDER + cs.getTitle() + \".cpsc\");\r\n        f.delete();\r\n        ConsoleInterface.saveCardSetMenu(this.cardSetsMenu);\r\n    }\r\n\r\n    // EFFECTS: return the integer user input and \"absorbs\" newline character\r\n    private int getIntInput() {\r\n        while (true) {\r\n            try {\r\n                return Integer.parseInt(sc.nextLine());\r\n            } catch (NumberFormatException e) {\r\n                System.out.println(\"That was not an integer! Please try again\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // EFFECTS: begin the starting menu of the program\r\n    @SuppressWarnings({\"checkstyle:MethodLength\", \"checkstyle:SuppressWarnings\"})\r\n    private void start() {\r\n        while (true) {\r\n            int choice;\r\n            System.out.println(\"Hello, welcome to CPSC \\nWhat would you like to do?\");\r\n            System.out.println(\"[1] View card sets\");\r\n            System.out.println(\"[2] Make new card set\");\r\n            System.out.println(\"[0] exit\");\r\n\r\n            try {\r\n                choice = getIntInput();\r\n            } catch (InputMismatchException e) {\r\n                System.out.println(\"You did not enter an integer!\");\r\n                choice = getIntInput();\r\n            }\r\n            if (choice == 1) {\r\n                seeCardSets();\r\n            } else if (choice == 2) {\r\n                makeNewCardSet();\r\n            } else if (choice == 0) {\r\n                System.out.println(\"Thanks for using CPSC, bye bye!!\");\r\n                ConsoleInterface.saveCardSetMenu(this.cardSetsMenu);\r\n                break;\r\n            } else {\r\n                System.out.println(choice + \" is not a valid option, please try again\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // EFFECTS: lead user to create menu if there are no cardsets\r\n    private void seeCardSetEmpty() {\r\n        while (true) {\r\n            System.out.println(\"You have no card sets, would you like to make a new one?\");\r\n            System.out.println(\"[1] Make a new card set\");\r\n            System.out.println(\"[0] go back\");\r\n            int choice = getIntInput();\r\n            if (choice == 1) {\r\n                makeNewCardSet();\r\n            } else if (choice == 0) {\r\n                saveCardSetMenu(this.cardSetsMenu);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // EFFECTS: display menu to pick action for a chosen card set\r\n    // MODIFIES: currentCardSet, this\r\n    @SuppressWarnings({\"checkstyle:MethodLength\", \"checkstyle:SuppressWarnings\"})\r\n    private void cardSetSelected(CardSet currentCardSet) {\r\n        while (true) {\r\n            System.out.println(\"What do you want to do with card set, \" + \"'\" + currentCardSet.getTitle() + \"'\");\r\n            System.out.println(\"[1] Review card set\\n[2] Edit card set\\n[3] Delete card set\"\r\n                    + \"\\n[4] View card set contents and stats\");\r\n            System.out.println(\"[0] go back\");\r\n            currentCardSet.incrementUseCount();\r\n            int csChoice = getIntInput();\r\n            if (csChoice == 1) {\r\n                reviewCardSet(currentCardSet);\r\n            } else if (csChoice == 2) {\r\n                editCardSet(currentCardSet);\r\n            } else if (csChoice == 3) {\r\n                cardSetsMenu.deleteCardSet(currentCardSet);\r\n                deleteCardSet(currentCardSet);\r\n                break;\r\n            } else if (csChoice == 4) {\r\n                seeCardStats(currentCardSet);\r\n            } else if (csChoice == 0) {\r\n                saveCardSet(currentCardSet);\r\n                saveCardSetMenu(this.cardSetsMenu);\r\n                break;\r\n            } else {\r\n                System.out.println(csChoice + \" is not a valid choice, please pick again\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // EFFECTS: display the stats of the cardset, including the accuracy of each card and how much the cardset is used\r\n    private void seeCardStats(CardSet currentCardSet) {\r\n        System.out.println(\"The cardset '\" + currentCardSet.getTitle() + \"' has been selected \"\r\n                + currentCardSet.getUseCount() + \" times. It is currently \"\r\n                + (currentCardSet.getAverageAccuracy() * 100) + \"% accurate\");\r\n        int i = 0;\r\n        for (Card c : currentCardSet.getCards()) {\r\n            i++;\r\n            System.out.println(\"Card \" + i + \": \");\r\n            System.out.println(c.getFront().getContent() + \" : \" + c.getBack().getContent());\r\n            int sum = (c.getCorrectCount() + c.getWrongCount());\r\n            if (sum != 0) {\r\n                System.out.println(\"Reviewed: \" + (c.getCorrectCount() + c.getWrongCount()) + \" times; \"\r\n                        + \"Accuracy: \" + (c.getAccuracy() * 100) + \"%\");\r\n            } else {\r\n                System.out.println(\"This Card has not been reviewed yet\");\r\n            }\r\n        }\r\n        System.out.println();\r\n    }\r\n\r\n    // EFFECTS: sorts and displays the cardsets inside a cardsetmenu and allow users to select a given cardset\r\n    // MODIFIES: this\r\n    @SuppressWarnings({\"checkstyle:MethodLength\", \"checkstyle:SuppressWarnings\"})\r\n    private void seeCardSets() {\r\n        if (this.cardSetsMenu.getCardSets().size() == 0) {\r\n            seeCardSetEmpty();\r\n        } else {\r\n            while (true) {\r\n                this.cardSetsMenu.sortCardSet();\r\n                int count = 0;\r\n                for (CardSet cs : this.cardSetsMenu.getCardSets()) {\r\n                    count += 1;\r\n                    System.out.println(count + \". \" + cs.getTitle());\r\n                }\r\n                System.out.println(\"[0] go back\");\r\n                System.out.println(\"Which card set would you like to select? (enter card number)\");\r\n                int choice = getIntInput();\r\n                if (choice <= count && choice >= 1) {\r\n                    int i = choice - 1;\r\n                    this.cardSetsMenu.setCardSet(i,\r\n                            ConsoleInterface.readCardSet(this.cardSetsMenu.getCardSet(i).getTitle()));\r\n                    cardSetSelected(cardSetsMenu.getCardSet(i));\r\n                } else if (choice == 0) {\r\n                    saveCardSetMenu(this.cardSetsMenu);\r\n                    break;\r\n                } else {\r\n                    System.out.println(choice + \" is not a valid choice, please pick again\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // EFFECTS: create new cardset and add it to the menu, also allow users to add new cards in the cardset\r\n    // MODIFIES: this\r\n    @SuppressWarnings({\"checkstyle:MethodLength\", \"checkstyle:SuppressWarnings\"})\r\n    private void makeNewCardSet() {\r\n        CardSet newCardSet;\r\n        while (true) {\r\n            System.out.println(\"Card set maker:\\nWhat is the title of this card set?\");\r\n            String title = sc.nextLine();\r\n            if (cardSetsMenu.containsCardSetWithName(title)) {\r\n                System.out.println(\"A card set already has the title: \" + \"\\\"\" + title + \"\\\"\\nPlease try again\");\r\n            } else {\r\n                newCardSet = new CardSet(title);\r\n                cardSetsMenu.addCardSet(newCardSet);\r\n                saveCardSet(newCardSet);\r\n                saveCardSetMenu(this.cardSetsMenu);\r\n                break;\r\n            }\r\n        }\r\n        while (true) {\r\n            System.out.println(\"[1] add new card\\n[0] go back\");\r\n            int cardChoice = getIntInput();\r\n            if (cardChoice == 1) {\r\n                makeNewCard(newCardSet);\r\n            } else if (cardChoice == 0) {\r\n                saveCardSet(newCardSet);\r\n                saveCardSetMenu(this.cardSetsMenu);\r\n                break;\r\n            } else {\r\n                System.out.println(cardChoice + \" is not a valid option, please try again\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // EFFECTS: create and adds new card to a cardset\r\n    // MODIFIES: newCardSet\r\n    private void makeNewCard(CardSet newCardSet) {\r\n        System.out.println(\"Enter the value for the front of the card\");\r\n        String frontText = sc.nextLine();\r\n        System.out.println(\"Enter the value for the back of the card\");\r\n        String backText = sc.nextLine();\r\n        CardSide front = new CardSide();\r\n        CardSide back = new CardSide();\r\n        front.setContent(frontText);\r\n        back.setContent(backText);\r\n        Card newCard = new Card(front, back);\r\n        newCardSet.addCard(newCard);\r\n        System.out.println(\"New card added\");\r\n    }\r\n\r\n    // EFFECTS: display the review options for a cardset\r\n    // MODIFIES: currentCardSet\r\n    private boolean checkReviewType(CardSet currentCardSet) {\r\n        while (true) {\r\n            System.out.println(\"Do you want to show the front or the back first?\");\r\n            System.out.println(\"[1] front\");\r\n            System.out.println(\"[2] back\");\r\n            System.out.println(\"[0] exit review\");\r\n            int choice = getIntInput();\r\n            if (choice == 1) {\r\n                currentCardSet.setCardFlippedState(false);\r\n                break;\r\n            } else if (choice == 2) {\r\n                currentCardSet.setCardFlippedState(true);\r\n                break;\r\n            } else if (choice == 0) {\r\n                saveCardSet(currentCardSet);\r\n                saveCardSetMenu(this.cardSetsMenu);\r\n                return false;\r\n            } else {\r\n                System.out.println(choice + \" is not a valid option, please try again\");\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // EFFECTS: start the review process for a cardset\r\n    private void reviewCardSet(CardSet currentCardSet) {\r\n        boolean cont = checkReviewType(currentCardSet);\r\n        if (cont) {\r\n            System.out.println(\"Press enter to begin\");\r\n            sc.nextLine();\r\n            ArrayList<Card> mixedCards = currentCardSet.getMixedCards();\r\n            boolean exit;\r\n            for (Card c : mixedCards) {\r\n                System.out.println(\"\\n\" + c.getCardFace().getContent() + \"\\nType your answer or just press enter\");\r\n                sc.nextLine();\r\n                c.flip();\r\n                System.out.println(c.getCardFace().getContent());\r\n                exit = verifyCardCorrectnessHelper(c);\r\n                if (exit) {\r\n                    saveCardSet(currentCardSet);\r\n                    saveCardSetMenu(this.cardSetsMenu);\r\n                    break;\r\n                }\r\n            }\r\n            System.out.println(\"Review completed\");\r\n        }\r\n    }\r\n\r\n    // EFFECTS: displays options for a card after review process\r\n    //          allows user to check whether they got it correct, wrong, or want to exit\r\n    // MODIFIES: c\r\n    private boolean verifyCardCorrectnessHelper(Card c) {\r\n        while (true) {\r\n            System.out.println(\"Were you correct? \\n[1] correct; [2] wrong; [0] exit review\");\r\n            int choice = getIntInput();\r\n            if (choice == 1) {\r\n                c.incrementCorrectCount();\r\n                break;\r\n            } else if (choice == 2) {\r\n                c.incrementWrongCount();\r\n                break;\r\n            } else if (choice == 0) {\r\n                return true;\r\n            } else {\r\n                System.out.println(choice + \" is not valid, please try again\");\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // EFFECTS: display options to edit a cardset:\r\n    //           add new card, delete card, edit card, or go back\r\n    private void editCardSet(CardSet currentCardSet) {\r\n        while (true) {\r\n            System.out.println(\"How do you want to edit the card set, \" + \"'\" + currentCardSet.getTitle() + \"'\");\r\n            System.out.println(\"[1] Add new card\");\r\n            System.out.println(\"[2] Edit Card\");\r\n            System.out.println(\"[3] Delete Card\");\r\n            System.out.println(\"[0] go back\");\r\n            int choice = getIntInput();\r\n            if (choice == 1) {\r\n                makeNewCard(currentCardSet);\r\n            } else if (choice == 2) {\r\n                editCardSetViewCards(currentCardSet);\r\n            } else if (choice == 3) {\r\n                deleteCardSetViewCards(currentCardSet);\r\n            } else if (choice == 0) {\r\n                saveCardSet(currentCardSet);\r\n                saveCardSetMenu(this.cardSetsMenu);\r\n                break;\r\n            } else {\r\n                System.out.println(choice + \" is not a valid input, please try again\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // EFFECTS: display options to view and delete the card in a cardset\r\n    // MODIFIES: currentCardSet\r\n    private void deleteCardSetViewCards(CardSet currentCardSet) {\r\n        while (true) {\r\n            ArrayList<Card> cards = currentCardSet.getCards();\r\n            int i = 1;\r\n            for (Card c : cards) {\r\n                System.out.println(\"Card \" + i + \":\");\r\n                System.out.println(c.getFront().getContent() + \" : \" + c.getBack().getContent());\r\n                i++;\r\n            }\r\n            System.out.println(\"Which card do you want to delete? (enter card number to select, enter 0 to exit)\");\r\n            int choice = getIntInput();\r\n            if (choice >= 1 && choice <= i) {\r\n                currentCardSet.deleteCard(choice - 1);\r\n            } else if (choice == 0) {\r\n                saveCardSet(currentCardSet);\r\n                saveCardSetMenu(this.cardSetsMenu);\r\n                break;\r\n            } else {\r\n                System.out.println(choice + \" is not a valid option, please pick again\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // EFFECTS: display options to see cards, and pick a card to edit in a cardset\r\n    private void editCardSetViewCards(CardSet currentCardSet) {\r\n        while (true) {\r\n            ArrayList<Card> cards = currentCardSet.getCards();\r\n            int i = 1;\r\n            for (Card c : cards) {\r\n                System.out.println(\"Card \" + i + \":\");\r\n                System.out.println(c.getFront().getContent() + \" : \" + c.getBack().getContent());\r\n                i++;\r\n            }\r\n            System.out.println(\"Which card do you want to edit? (enter card number to select; enter 0 to exit)\");\r\n            int choice = getIntInput();\r\n            if (choice >= 1 && choice <= i) {\r\n                editCard(currentCardSet, choice - 1);\r\n            } else if (choice == 0) {\r\n                saveCardSet(currentCardSet);\r\n                saveCardSetMenu(this.cardSetsMenu);\r\n                break;\r\n            } else {\r\n                System.out.println(choice + \" is not a valid option, please pick again\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // EFFECTS: display the options to change a card at index i in a cardset\r\n    private void editCard(CardSet c, int i) {\r\n        Card card = c.getCardByIndex(i);\r\n        CardSide cardFront = card.getFront();\r\n        CardSide cardBack = card.getBack();\r\n        System.out.println(\"The front of the card is: \");\r\n        System.out.println(cardFront.getContent());\r\n        System.out.println(\"Do you want to change this side?\");\r\n        changeCardSide(cardFront);\r\n        System.out.println(\"The back of the card is: \");\r\n        System.out.println(cardBack.getContent());\r\n        System.out.println(\"Do you want to change this side?\");\r\n        changeCardSide(cardBack);\r\n    }\r\n\r\n    // EFFECTS: change the content of a cardside\r\n    // MODIFIES: cs\r\n    private void changeCardSide(CardSide cs) {\r\n        while (true) {\r\n            System.out.println(\"[1] yes\");\r\n            System.out.println(\"[2] no\");\r\n            int choice = getIntInput();\r\n            if (choice == 1) {\r\n                System.out.println(\"Enter the new content for this card face:\");\r\n                String content = sc.nextLine();\r\n                cs.setContent(content);\r\n                break;\r\n            } else if (choice == 2) {\r\n                break;\r\n            } else {\r\n                System.out.println(choice + \" is not a valid option, please try again\");\r\n            }\r\n        }\r\n    }\r\n}\r\n
----Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
----<+>UTF-8
----===================================================================
----diff --git a/src/main/ui/ConsoleInterface.java b/src/main/ui/ConsoleInterface.java
------- a/src/main/ui/ConsoleInterface.java	(revision e336a1ca1e0f18e0574a62591c62b1d550a6dc88)
----+++ b/src/main/ui/ConsoleInterface.java	(date 1677487135754)
----@@ -14,6 +14,7 @@
---- import java.util.InputMismatchException;
---- import java.util.Scanner;
---- 
----+// TODO: fix length warnings.
---- // The main console user interface of the flashcard application.
---- public class ConsoleInterface {
----     private final Scanner sc = new Scanner(System.in);
-Index: data/CardSets/Card set 2.cpsc
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>{\r\n    \"cards\": [\r\n        {\r\n            \"correctCount\": 0,\r\n            \"wrongCount\": 0,\r\n            \"back\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 2 Back 1\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            },\r\n            \"state\": false,\r\n            \"front\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 2 Front 1\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            }\r\n        },\r\n        {\r\n            \"correctCount\": 0,\r\n            \"wrongCount\": 3,\r\n            \"back\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 2 Back 2\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            },\r\n            \"state\": false,\r\n            \"front\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 2 Front 2\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            }\r\n        },\r\n        {\r\n            \"correctCount\": 0,\r\n            \"wrongCount\": 0,\r\n            \"back\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 2 Back 3\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            },\r\n            \"state\": false,\r\n            \"front\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 2 Front 3\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            }\r\n        },\r\n        {\r\n            \"correctCount\": 0,\r\n            \"wrongCount\": 0,\r\n            \"back\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 2 Back 4\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            },\r\n            \"state\": false,\r\n            \"front\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 2 Front 4\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            }\r\n        },\r\n        {\r\n            \"correctCount\": 0,\r\n            \"wrongCount\": 0,\r\n            \"back\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 2 Back 5\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            },\r\n            \"state\": false,\r\n            \"front\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 2 Front 5\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            }\r\n        },\r\n        {\r\n            \"correctCount\": 5,\r\n            \"wrongCount\": 16,\r\n            \"back\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 2 Back 6\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            },\r\n            \"state\": false,\r\n            \"front\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 2 Front 6\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            }\r\n        },\r\n        {\r\n            \"correctCount\": 0,\r\n            \"wrongCount\": 1,\r\n            \"back\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 2 Back 7\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            },\r\n            \"state\": false,\r\n            \"front\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 2 Front 7\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            }\r\n        },\r\n        {\r\n            \"correctCount\": 0,\r\n            \"wrongCount\": 1,\r\n            \"back\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 2 Back 8\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            },\r\n            \"state\": false,\r\n            \"front\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 2 Front 8\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            }\r\n        }\r\n    ],\r\n    \"title\": \"Card set 2\",\r\n    \"usecount\": 26\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/data/CardSets/Card set 2.cpsc b/data/CardSets/Card set 2.cpsc
---- a/data/CardSets/Card set 2.cpsc	(revision d3c103cd9c157ac70cae1ddda3516fe6fd579c5c)
-+++ b/data/CardSets/Card set 2.cpsc	(date 1679645232144)
-@@ -250,5 +250,5 @@
-         }
-     ],
-     "title": "Card set 2",
--    "usecount": 26
-+    "usecount": 27
- }
-\ No newline at end of file
-Index: data/CardSets/Card set 10.cpsc
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>{\r\n    \"cards\": [\r\n        {\r\n            \"correctCount\": 0,\r\n            \"wrongCount\": 0,\r\n            \"back\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 10 Back 1\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            },\r\n            \"state\": false,\r\n            \"front\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 10 Front 1\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            }\r\n        },\r\n        {\r\n            \"correctCount\": 0,\r\n            \"wrongCount\": 0,\r\n            \"back\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 10 Back 2\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            },\r\n            \"state\": false,\r\n            \"front\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 10 Front 2\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            }\r\n        },\r\n        {\r\n            \"correctCount\": 0,\r\n            \"wrongCount\": 1,\r\n            \"back\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 10 Back 3\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            },\r\n            \"state\": false,\r\n            \"front\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 10 Front 3\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            }\r\n        },\r\n        {\r\n            \"correctCount\": 6,\r\n            \"wrongCount\": 1,\r\n            \"back\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 10 Back 4\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            },\r\n            \"state\": false,\r\n            \"front\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 10 Front 4\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            }\r\n        },\r\n        {\r\n            \"correctCount\": 0,\r\n            \"wrongCount\": 1,\r\n            \"back\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 10 Back 5\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            },\r\n            \"state\": false,\r\n            \"front\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 10 Front 5\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            }\r\n        },\r\n        {\r\n            \"correctCount\": 0,\r\n            \"wrongCount\": 0,\r\n            \"back\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 10 Back 6\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            },\r\n            \"state\": false,\r\n            \"front\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 10 Front 6\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            }\r\n        },\r\n        {\r\n            \"correctCount\": 0,\r\n            \"wrongCount\": 1,\r\n            \"back\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 10 Back 7\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            },\r\n            \"state\": false,\r\n            \"front\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 10 Front 7\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            }\r\n        },\r\n        {\r\n            \"correctCount\": 0,\r\n            \"wrongCount\": 0,\r\n            \"back\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 10 Back 8\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            },\r\n            \"state\": false,\r\n            \"front\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 10 Front 8\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            }\r\n        }\r\n    ],\r\n    \"title\": \"Card set 10\",\r\n    \"usecount\": 4\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/data/CardSets/Card set 10.cpsc b/data/CardSets/Card set 10.cpsc
---- a/data/CardSets/Card set 10.cpsc	(revision d3c103cd9c157ac70cae1ddda3516fe6fd579c5c)
-+++ b/data/CardSets/Card set 10.cpsc	(date 1679645162551)
-@@ -250,5 +250,5 @@
-         }
-     ],
-     "title": "Card set 10",
--    "usecount": 4
-+    "usecount": 5
- }
-\ No newline at end of file
-Index: data/CardSets/Card set 1.cpsc
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>{\r\n    \"cards\": [\r\n        {\r\n            \"correctCount\": 1,\r\n            \"wrongCount\": 0,\r\n            \"back\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 1 Back 1\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            },\r\n            \"state\": false,\r\n            \"front\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 1 Front 1\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            }\r\n        },\r\n        {\r\n            \"correctCount\": 1,\r\n            \"wrongCount\": 0,\r\n            \"back\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 1 Back 2\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            },\r\n            \"state\": false,\r\n            \"front\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 1 Front 2\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            }\r\n        },\r\n        {\r\n            \"correctCount\": 2,\r\n            \"wrongCount\": 0,\r\n            \"back\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 1 Back 3\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            },\r\n            \"state\": false,\r\n            \"front\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 1 Front 3\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            }\r\n        },\r\n        {\r\n            \"correctCount\": 0,\r\n            \"wrongCount\": 1,\r\n            \"back\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 1 Back 4\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            },\r\n            \"state\": false,\r\n            \"front\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 1 Front 4\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            }\r\n        },\r\n        {\r\n            \"correctCount\": 0,\r\n            \"wrongCount\": 1,\r\n            \"back\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 1 Back 5\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            },\r\n            \"state\": false,\r\n            \"front\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 1 Front 5\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            }\r\n        },\r\n        {\r\n            \"correctCount\": 0,\r\n            \"wrongCount\": 1,\r\n            \"back\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 1 Back 6\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            },\r\n            \"state\": false,\r\n            \"front\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 1 Front 6\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            }\r\n        },\r\n        {\r\n            \"correctCount\": 1,\r\n            \"wrongCount\": 0,\r\n            \"back\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 1 Back 7\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            },\r\n            \"state\": false,\r\n            \"front\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 1 Front 7\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            }\r\n        },\r\n        {\r\n            \"correctCount\": 1,\r\n            \"wrongCount\": 1,\r\n            \"back\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 1 Back 8\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            },\r\n            \"state\": false,\r\n            \"front\": {\r\n                \"backgroundColor\": {\r\n                    \"red\": 255,\r\n                    \"green\": 255,\r\n                    \"blue\": 255\r\n                },\r\n                \"content\": \"Set 1 Front 8\",\r\n                \"fontColor\": {\r\n                    \"red\": 0,\r\n                    \"green\": 0,\r\n                    \"blue\": 0\r\n                }\r\n            }\r\n        }\r\n    ],\r\n    \"title\": \"Card set 1\",\r\n    \"usecount\": 19\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/data/CardSets/Card set 1.cpsc b/data/CardSets/Card set 1.cpsc
---- a/data/CardSets/Card set 1.cpsc	(revision d3c103cd9c157ac70cae1ddda3516fe6fd579c5c)
-+++ b/data/CardSets/Card set 1.cpsc	(date 1679645256279)
-@@ -250,5 +250,5 @@
-         }
-     ],
-     "title": "Card set 1",
--    "usecount": 19
-+    "usecount": 20
- }
-\ No newline at end of file
-Index: data/CardSets/skull.cpsc
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>{\r\n    \"cards\": [{\r\n        \"correctCount\": 2,\r\n        \"wrongCount\": 25,\r\n        \"back\": {\r\n            \"backgroundColor\": {\r\n                \"red\": 255,\r\n                \"green\": 255,\r\n                \"blue\": 255\r\n            },\r\n            \"content\": \"<img width=\\\"300\\\"  src = \\\"http://t2.gstatic.com/licensed-image?q=tbn:ANd9GcScJ46EzNze-KfsB98plR6uHYomOBUxhS7P-yXILRd3XbTX80a72PDqFVAoEfzG0wSGOzo1EtSockhERR8\\\"><\\/img>\",\r\n            \"fontColor\": {\r\n                \"red\": 0,\r\n                \"green\": 0,\r\n                \"blue\": 0\r\n            }\r\n        },\r\n        \"state\": true,\r\n        \"front\": {\r\n            \"backgroundColor\": {\r\n                \"red\": 255,\r\n                \"green\": 255,\r\n                \"blue\": 255\r\n            },\r\n            \"content\": \"<h1> what is an eukaryotic cell \\u2049️ <\\/h1>\",\r\n            \"fontColor\": {\r\n                \"red\": 0,\r\n                \"green\": 0,\r\n                \"blue\": 0\r\n            }\r\n        }\r\n    }],\r\n    \"title\": \"skull\",\r\n    \"usecount\": 29\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/data/CardSets/skull.cpsc b/data/CardSets/skull.cpsc
---- a/data/CardSets/skull.cpsc	(revision d3c103cd9c157ac70cae1ddda3516fe6fd579c5c)
-+++ b/data/CardSets/skull.cpsc	(date 1679645201993)
-@@ -31,5 +31,5 @@
-         }
-     }],
-     "title": "skull",
--    "usecount": 29
-+    "usecount": 30
- }
-\ No newline at end of file
